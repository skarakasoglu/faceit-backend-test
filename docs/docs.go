// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/health": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "HealthController"
                ],
                "summary": "checks the status of the service",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/health.Response"
                        }
                    }
                }
            }
        },
        "/v1/subscribe": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscribeController"
                ],
                "summary": "creates a subscribe request to given topic and sends it to verification queue, returns the subscription details.",
                "parameters": [
                    {
                        "description": "subscription details",
                        "name": "SubscribeRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/sub.SubscribeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/sub.SubscribeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apierr.ApiError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apierr.ApiError"
                        }
                    }
                }
            }
        },
        "/v1/users": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserController"
                ],
                "summary": "returns the users with respect to the pagination and filter parameters",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "page number that will be returned",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "how many rows are returned by page",
                        "name": "perPage",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "{\"country\": \"UK\", \"first_name\": \"Alisson\"}",
                        "description": "filtering parameters that will be used while fetching the users",
                        "name": "filter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.GetUsersManyResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apierr.ApiError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apierr.ApiError"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserController"
                ],
                "summary": "creates a user",
                "parameters": [
                    {
                        "description": "user details",
                        "name": "CreateUserRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apierr.ApiError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apierr.ApiError"
                        }
                    }
                }
            }
        },
        "/v1/users/{id}": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserController"
                ],
                "summary": "deletes the user having id provided in path param",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of the user",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.DeleteUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apierr.ApiError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apierr.ApiError"
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserController"
                ],
                "summary": "updates a user having id provided in path param",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of the user",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "user details",
                        "name": "UpdateUserRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.UpdateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apierr.ApiError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apierr.ApiError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apierr.ApiError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "health.DatabaseConnection": {
            "type": "object",
            "properties": {
                "connected": {
                    "type": "boolean"
                },
                "error": {
                    "type": "string"
                }
            }
        },
        "health.MemoryStats": {
            "type": "object",
            "properties": {
                "completed_garbage_collector_cycles": {
                    "type": "integer"
                },
                "current_allocated": {
                    "type": "integer"
                },
                "total_allocated": {
                    "type": "integer"
                },
                "total_memory": {
                    "type": "integer"
                }
            }
        },
        "health.Response": {
            "type": "object",
            "properties": {
                "database_connection": {
                    "$ref": "#/definitions/health.DatabaseConnection"
                },
                "memory_stats": {
                    "$ref": "#/definitions/health.MemoryStats"
                },
                "status": {
                    "type": "boolean"
                }
            }
        },
        "sub.SubscribeRequest": {
            "description": "subscribe endpoint request model contains the subscription parameters",
            "type": "object",
            "required": [
                "callback",
                "type"
            ],
            "properties": {
                "callback": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "sub.SubscribeResponse": {
            "description": "subscribe endpoint response model which containing the result of the subscriptions",
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "user.CreateUserRequest": {
            "description": "create user endpoint request model",
            "type": "object",
            "required": [
                "country",
                "email",
                "first_name",
                "last_name",
                "nickname",
                "password"
            ],
            "properties": {
                "country": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "user.CreateUserResponse": {
            "description": "create user endpoint response model containing the user information",
            "type": "object",
            "properties": {
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "user.DeleteUserResponse": {
            "description": "delete user response model containing the id of deleted user",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "user.GetUsersManyResponse": {
            "description": "get users response model that contains the users returned",
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user.User"
                    }
                }
            }
        },
        "user.UpdateUserRequest": {
            "type": "object",
            "required": [
                "country",
                "email",
                "first_name",
                "last_name",
                "nickname",
                "password"
            ],
            "properties": {
                "country": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "user.UpdateUserResponse": {
            "description": "update user endpoint response model containing updated user information",
            "type": "object",
            "properties": {
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "user.User": {
            "description": "user model",
            "type": "object",
            "properties": {
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "nickname": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Faceit Backend Test",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
